{"version":3,"sources":["store/action.js","components/preloader/preloader.jsx","components/pagenotfound/pagenotfound.jsx","api/api.js","components/filter/filter.jsx","const.js","components/pagination/pagination.jsx","components/table/table.jsx","components/main-page/main-page.jsx","components/app/app.js","store/reducer.js","store/store.js","index.js"],"names":["ActionType","ActionCreator","posts","type","payload","id","page","Preloader","className","PageNotFound","to","Api","this","_api","a","fetch","response","json","result","userId","Filter","setFilterId","action","placeholder","onChange","evt","parseInt","target","value","MAX_POSTS","Pagination","activePage","postListLength","React","useState","pagination","setPagination","count","createLink","i","v4","createActiveItem","useEffect","counter","TOTAL_PAGES","paginationElements","push","renderPagination","Table","postsAtPage","fields","direction","sortedField","setSortedField","state","sortTable","val","sortedFields","sort","b","body","map","post","title","onClick","length","colSpan","connect","postList","dispatch","setCurrentPage","getPostsAtPage","currentPage","intActivePage","api","getAllPosts","isLoaded","setIsLoaded","getPost","then","basename","path","exact","render","match","num","params","component","initialState","filterId","reducer","currentPageList","slice","filterList","filterPosts","filter","store","createStore","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.d43e53e5.chunk.js","sourcesContent":["export const ActionType = {\r\n  GET_ALL_POSTS: \"get_all_post\",\r\n  FILTER_ID: \"filter_text\",\r\n  SET_CURRENT_PAGE: \"set_current_page\",\r\n  GET_POSTS_AT_PAGE: \"get_posts_at_page\",\r\n};\r\n\r\nexport const ActionCreator = {\r\n  getAllPosts: (posts) => ({\r\n    type: ActionType.GET_ALL_POSTS,\r\n    payload: posts,\r\n  }),\r\n  getPostsAtPage: () => ({\r\n    type: ActionType.GET_POSTS_AT_PAGE,\r\n  }),\r\n  setFilterId: (id) => ({\r\n    type: ActionType.FILTER_ID,\r\n    payload: id,\r\n  }),\r\n  setCurrentPage: (page) => ({\r\n    type: ActionType.SET_CURRENT_PAGE,\r\n    payload: page,\r\n  }),\r\n};\r\n","import React from \"react\";\r\nimport \"./preloader.css\";\r\n\r\nfunction Preloader() {\r\n  return (\r\n    <div className=\"loadingio-spinner-dual-ring-uhp275ka0wt\">\r\n      <div className=\"ldio-x9915im0a9n\">\r\n        <div></div>\r\n        <div>\r\n          <div></div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Preloader;\r\n","import React from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nconst PageNotFound = () => {\r\n  return (\r\n    <>\r\n      <h1>Данная страница не найдена</h1>\r\n      <p>\r\n        Пожалуйста, вернитесь на <Link to=\"/\">главную страницу</Link>\r\n      </p>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default PageNotFound;\r\n","class Api {\r\n  constructor() {\r\n    this._api = `https://jsonplaceholder.typicode.com`;\r\n  }\r\n\r\n  async getPost() {\r\n    const response = await fetch(`${this._api}/posts`);\r\n    const result = await response.json();\r\n    return result;\r\n  }\r\n\r\n  async getFilterPost(userId) {\r\n    const response = await fetch(`${this._api}/posts?userId=${userId}`);\r\n    const result = await response.json();\r\n    return result;\r\n  }\r\n}\r\n\r\nexport default Api;\r\n","import React from \"react\";\r\nimport \"./filter.css\";\r\n\r\nimport PropTypes from \"prop-types\";\r\n\r\nconst Filter = ({ setFilterId }) => {\r\n  const filtration = (evt) => {\r\n    setFilterId(parseInt(evt.target.value, 10));\r\n  };\r\n\r\n  return (\r\n    <form action=\"\" className=\"filter-form\">\r\n      <input type=\"text\" placeholder=\"Введите user id\" onChange={filtration} />\r\n    </form>\r\n  );\r\n};\r\n\r\nFilter.propTypes = {\r\n  setFilterId: PropTypes.func.isRequired,\r\n};\r\n\r\nexport default Filter;\r\n","export const MAX_POSTS = 50;\r\n","import React from \"react\";\r\n\r\nimport { Link } from \"react-router-dom\";\r\nimport { v4 } from \"uuid\";\r\nimport { MAX_POSTS } from \"../../const\";\r\nimport PropTypes from \"prop-types\";\r\nimport \"./pagination.css\";\r\n\r\nconst Pagination = ({ activePage, postListLength }) => {\r\n  const [pagination, setPagination] = React.useState([]);\r\n  const count = postListLength;\r\n\r\n  const createLink = (i) => {\r\n    return (\r\n      <li key={v4()}>\r\n        <Link to={`/page/` + i}>{i}</Link>\r\n      </li>\r\n    );\r\n  };\r\n\r\n  const createActiveItem = (i) => {\r\n    return (\r\n      <li key={v4()}>\r\n        <span>{i}</span>\r\n      </li>\r\n    );\r\n  };\r\n\r\n  const renderPagination = (counter) => {\r\n    const TOTAL_ELEMENTS = MAX_POSTS;\r\n    const TOTAL_PAGES = counter / TOTAL_ELEMENTS;\r\n    const paginationElements = [];\r\n\r\n    for (let i = 1; i <= TOTAL_PAGES; i++) {\r\n      if (activePage === i) {\r\n        paginationElements.push(createActiveItem(i));\r\n      } else {\r\n        paginationElements.push(createLink(i));\r\n      }\r\n    }\r\n\r\n    setPagination(paginationElements);\r\n  };\r\n\r\n  React.useEffect(() => {\r\n    renderPagination(count);\r\n  }, [count, activePage]);\r\n\r\n  return <ul className=\"pagination\">{pagination}</ul>;\r\n};\r\n\r\nPagination.propTypes = {\r\n  postListLength: PropTypes.number.isRequired,\r\n  activePage: PropTypes.number.isRequired,\r\n};\r\n\r\nexport default Pagination;\r\n","import React, { useEffect, useState } from \"react\";\r\nimport { v4 } from \"uuid\";\r\nimport \"./table.css\";\r\n\r\nimport PropTypes from \"prop-types\";\r\n\r\nconst Table = ({ postsAtPage }) => {\r\n  const [sortedField, setSortedField] = useState({\r\n    fields: [],\r\n    direction: \"down\",\r\n  });\r\n\r\n  useEffect(() => {\r\n    setSortedField((state) => ({\r\n      ...state,\r\n      fields: postsAtPage,\r\n    }));\r\n  }, [postsAtPage]);\r\n\r\n  const sortTable = (val) => {\r\n    const sortedFields = [...sortedField.fields];\r\n\r\n    sortedFields.sort((a, b) => {\r\n      if (a[val] < b[val]) {\r\n        return sortedField.direction === \"down\" ? 1 : -1;\r\n      }\r\n\r\n      if (a[val] > b[val]) {\r\n        return sortedField.direction === \"down\" ? -1 : 1;\r\n      }\r\n\r\n      return 0;\r\n    });\r\n\r\n    setSortedField((state) => ({\r\n      ...state,\r\n      fields: [...sortedFields],\r\n      direction: state.direction === \"down\" ? \"up\" : \"down\",\r\n    }));\r\n  };\r\n\r\n  const body = sortedField.fields.map((post) => {\r\n    return (\r\n      <tr key={v4()}>\r\n        <td>{post.userId}</td>\r\n        <td>{post.id}</td>\r\n        <td className=\"text-left\">{post.title}</td>\r\n        <td className=\"text-left\">{post.body}</td>\r\n      </tr>\r\n    );\r\n  });\r\n\r\n  return (\r\n    <div className=\"table-responsive\">\r\n      <table>\r\n        <thead>\r\n          <tr>\r\n            <th onClick={() => sortTable(\"userId\")}>User Id</th>\r\n            <th onClick={() => sortTable(\"id\")}>Title id</th>\r\n            <th onClick={() => sortTable(\"title\")}>Title</th>\r\n            <th onClick={() => sortTable(\"body\")}>Message</th>\r\n          </tr>\r\n        </thead>\r\n        <tbody>\r\n          {sortedField.fields.length === 0 && (\r\n            <tr>\r\n              <td colSpan=\"4\">Ничего не найдено</td>\r\n            </tr>\r\n          )}\r\n\r\n          {body}\r\n        </tbody>\r\n      </table>\r\n    </div>\r\n  );\r\n};\r\n\r\nTable.propTypes = {\r\n  postsAtPage: PropTypes.array.isRequired,\r\n};\r\n\r\nexport default Table;\r\n","import React, { useEffect } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nimport Filter from \"../filter/filter\";\r\nimport Pagination from \"../pagination/pagination\";\r\nimport Table from \"../table/table\";\r\nimport { connect } from \"react-redux\";\r\nimport { ActionCreator } from \"../../store/action\";\r\n\r\nconst MainPage = ({\r\n  postList,\r\n  postsAtPage,\r\n  activePage,\r\n  currentPage,\r\n  getPostsAtPage,\r\n  setCurrentPage,\r\n  setFilterId,\r\n}) => {\r\n  const intActivePage = parseInt(activePage, 10);\r\n  //console.log(intActivePage);\r\n  useEffect(() => {\r\n    getPostsAtPage();\r\n    setCurrentPage(currentPage || activePage);\r\n  }, [getPostsAtPage, activePage, currentPage]);\r\n\r\n  return (\r\n    <main className=\"main-page\">\r\n      <Filter postsAtPage={postsAtPage} setFilterId={setFilterId} />\r\n      <Table postsAtPage={postsAtPage} />\r\n      <Pagination postListLength={postList.length} activePage={intActivePage} />\r\n    </main>\r\n  );\r\n};\r\n\r\nMainPage.propTypes = {\r\n  postList: PropTypes.array.isRequired,\r\n  postsAtPage: PropTypes.array.isRequired,\r\n  activePage: PropTypes.number.isRequired,\r\n  currentPage: PropTypes.number.isRequired,\r\n  getPostsAtPage: PropTypes.func.isRequired,\r\n  setCurrentPage: PropTypes.func.isRequired,\r\n  setFilterId: PropTypes.func.isRequired,\r\n};\r\n\r\nconst mapStateToProps = (state) => ({\r\n  postList: state.postList,\r\n  postsAtPage: state.postsAtPage,\r\n  activePage: state.activePage,\r\n});\r\n\r\nconst mapDispatchToProps = (dispatch) => ({\r\n  setCurrentPage(page) {\r\n    dispatch(ActionCreator.setCurrentPage(page));\r\n  },\r\n  getPostsAtPage() {\r\n    dispatch(ActionCreator.getPostsAtPage());\r\n  },\r\n  setFilterId(payload) {\r\n    dispatch(ActionCreator.setFilterId(payload));\r\n  },\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(MainPage);\r\n","import React, { useEffect, useState } from \"react\";\nimport { connect } from \"react-redux\";\nimport { ActionCreator } from \"../../store/action\";\nimport { Switch, BrowserRouter as Router, Route } from \"react-router-dom\";\nimport Preloader from \"../preloader/preloader\";\nimport PageNotFound from \"../pagenotfound/pagenotfound\";\nimport Api from \"../../api/api\";\nimport \"./app.css\";\n\nimport MainPage from \"../main-page/main-page\";\n\nimport PropTypes from \"prop-types\";\n\nconst api = new Api();\n\nconst App = ({ getAllPosts }) => {\n  const [isLoaded, setIsLoaded] = useState(false);\n\n  useEffect(() => {\n    api.getPost().then((result) => {\n      getAllPosts(result);\n      setIsLoaded(true);\n    });\n  }, [getAllPosts]);\n\n  if (!isLoaded) {\n    return <Preloader />;\n  }\n\n  return (\n    <div className=\"App\">\n      <Router basename=\"/table-component\">\n        <Switch>\n          <Route\n            path=\"/\"\n            exact\n            render={() => {\n              return <MainPage currentPage={1} />;\n            }}\n          ></Route>\n\n          <Route\n            path=\"/page/:num\"\n            exact\n            render={({ match }) => {\n              const num = parseInt(match.params.num, 10);\n              return <MainPage currentPage={num} />;\n            }}\n          ></Route>\n          <Route component={PageNotFound} />\n        </Switch>\n      </Router>\n    </div>\n  );\n};\n\nconst mapDispatchToProps = (dispatch) => ({\n  getAllPosts(posts) {\n    dispatch(ActionCreator.getAllPosts(posts));\n  },\n});\n\nApp.propTypes = {\n  getAllPosts: PropTypes.func.isRequired,\n};\n\nexport default connect(null, mapDispatchToProps)(App);\n","import { ActionType } from \"./action\";\r\nimport { MAX_POSTS } from \"../const\";\r\n\r\nconst initialState = {\r\n  postList: [],\r\n  postsAtPage: [],\r\n  filterId: 0,\r\n  activePage: 1,\r\n};\r\n\r\nconst reducer = (state = initialState, action) => {\r\n  switch (action.type) {\r\n    case ActionType.GET_ALL_POSTS:\r\n      return {\r\n        ...state,\r\n        postList: [...action.payload],\r\n      };\r\n\r\n    case ActionType.GET_POSTS_AT_PAGE:\r\n      const currentPageList = state.postList.slice(\r\n        (state.activePage - 1) * MAX_POSTS,\r\n        state.activePage * MAX_POSTS\r\n      );\r\n\r\n      return {\r\n        ...state,\r\n        postsAtPage: [...currentPageList],\r\n      };\r\n\r\n    case ActionType.FILTER_ID:\r\n      if (!action.payload || action.payload === \"\") {\r\n        const filterList = state.postList.slice(\r\n          (state.activePage - 1) * MAX_POSTS,\r\n          state.activePage * MAX_POSTS\r\n        );\r\n\r\n        return {\r\n          ...state,\r\n          postsAtPage: [...filterList],\r\n        };\r\n      }\r\n\r\n      const filterPosts = state.postList\r\n        .slice((state.activePage - 1) * MAX_POSTS, state.activePage * MAX_POSTS)\r\n        .filter((post) => post.userId === action.payload);\r\n\r\n      return {\r\n        ...state,\r\n        postsAtPage: [...filterPosts],\r\n      };\r\n\r\n    case ActionType.SET_CURRENT_PAGE:\r\n      return {\r\n        ...state,\r\n        activePage: action.payload,\r\n      };\r\n\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport default reducer;\r\n","import { createStore } from \"redux\";\r\nimport reducer from \"./reducer\";\r\n\r\nconst store = createStore(reducer);\r\n\r\nexport default store;\r\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./components/app/app\";\n\nimport { Provider } from \"react-redux\";\nimport store from \"./store/store\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}